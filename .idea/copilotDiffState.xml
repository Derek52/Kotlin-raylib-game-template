<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.kotlinMultiplatform)&#10;    alias(libs.plugins.kotlinxSerialization)&#10;}&#10;&#10;group = &quot;me.user&quot;&#10;version = &quot;1.0-SNAPSHOT&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;kotlin {&#10;    val hostOs = System.getProperty(&quot;os.name&quot;)&#10;    val isArm64 = System.getProperty(&quot;os.arch&quot;) == &quot;aarch64&quot;&#10;    val isMingwX64 = hostOs.startsWith(&quot;Windows&quot;)&#10;    val nativeTarget = when {&#10;        hostOs == &quot;Mac OS X&quot; &amp;&amp; isArm64 -&gt; macosArm64(&quot;native&quot;)&#10;        hostOs == &quot;Mac OS X&quot; &amp;&amp; !isArm64 -&gt; macosX64(&quot;native&quot;)&#10;        hostOs == &quot;Linux&quot; &amp;&amp; isArm64 -&gt; linuxArm64(&quot;native&quot;)&#10;        hostOs == &quot;Linux&quot; &amp;&amp; !isArm64 -&gt; linuxX64(&quot;native&quot;)&#10;        isMingwX64 -&gt; mingwX64(&quot;native&quot;)&#10;        else -&gt; throw GradleException(&quot;Host OS is not supported in Kotlin/Native.&quot;)&#10;    }&#10;&#10;    nativeTarget.apply {&#10;        binaries {&#10;            executable {&#10;                entryPoint = &quot;main&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    sourceSets {&#10;        nativeMain.dependencies {&#10;            implementation(libs.kotlinxSerializationJson)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.kotlinMultiplatform)&#10;    alias(libs.plugins.kotlinxSerialization)&#10;}&#10;&#10;group = &quot;me.user&quot;&#10;version = &quot;1.0-SNAPSHOT&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;kotlin {&#10;    val hostOs = System.getProperty(&quot;os.name&quot;)&#10;    val isArm64 = System.getProperty(&quot;os.arch&quot;) == &quot;aarch64&quot;&#10;    val isMingwX64 = hostOs.startsWith(&quot;Windows&quot;)&#10;    val nativeTarget = when {&#10;        hostOs == &quot;Mac OS X&quot; &amp;&amp; isArm64 -&gt; macosArm64(&quot;native&quot;)&#10;        hostOs == &quot;Mac OS X&quot; &amp;&amp; !isArm64 -&gt; macosX64(&quot;native&quot;)&#10;        hostOs == &quot;Linux&quot; &amp;&amp; isArm64 -&gt; linuxArm64(&quot;native&quot;)&#10;        hostOs == &quot;Linux&quot; &amp;&amp; !isArm64 -&gt; linuxX64(&quot;native&quot;)&#10;        isMingwX64 -&gt; mingwX64(&quot;native&quot;)&#10;        else -&gt; throw GradleException(&quot;Host OS is not supported in Kotlin/Native.&quot;)&#10;    }&#10;&#10;    nativeTarget.apply {&#10;        compilations.getByName(&quot;main&quot;) {&#10;            cinterops {&#10;                val raylib by creating&#10;            }&#10;        }&#10;        binaries {&#10;            executable {&#10;                entryPoint = &quot;main&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    sourceSets {&#10;        nativeMain.dependencies {&#10;            implementation(libs.kotlinxSerializationJson)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/nativeInterop/cinterop/libraylib.def">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/nativeInterop/cinterop/libraylib.def" />
              <option name="originalContent" value="headers = raylib.h&#10;headerFilter = raylib.h&#10;package = raylib&#10;&#10;libraryPaths = /usr/lib&#10;compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu -I/usr/local/include&#10;linkerOpts.linux = -lraylib -lGL -lm -lpthread -ldl -lrt -lX11&#10;#linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -L/usr/local/lib -lraylib -lGL -lm -lpthread -ldl -lrt -lX11" />
              <option name="updatedContent" value="headers = raylib.h&#10;headerFilter = raylib.h&#10;package = raylib&#10;&#10;libraryPaths = /usr/lib:/usr/local/lib&#10;compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu -I/usr/local/include&#10;linkerOpts.linux = -L/usr/lib -L/usr/local/lib -lraylib -lGL -lm -lpthread -ldl -lrt -lX11" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/nativeMain/kotlin/Colors.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/nativeMain/kotlin/Colors.kt" />
              <option name="originalContent" value="//import kotlinx.cinterop.ExperimentalForeignApi&#10;//import raylib.Color&#10;//&#10;//@OptIn(ExperimentalForeignApi::class)&#10;//class Colors {&#10;//    companion object {&#10;//        val LIGHTGRAY = Color(200, 200, 200, 255)&#10;//        val GRAY = Color(130, 130, 130, 255)&#10;//        val DARKGRAY = Color(80, 80, 80, 255)&#10;//        val YELLOW = Color(253, 249, 0, 255)&#10;//        val GOLD = Color(255, 203, 0, 255)&#10;//        val ORANGE = Color(255, 161, 0, 255)&#10;//        val PINK = Color(255, 109, 194, 255)&#10;//        val RED = Color(230, 41, 55, 255)&#10;//        val MAROON = Color(190, 33, 55, 255)&#10;//        val GREEN = Color(0, 228, 48, 255)&#10;//        val LIME = Color(0, 158, 47, 255)&#10;//        val DARKGREEN = Color(0, 117, 44, 255)&#10;//        val SKYBLUE = Color(102, 191, 255, 255)&#10;//        val BLUE = Color(0, 121, 241, 255)&#10;//        val DARKBLUE = Color(0, 82, 172, 255)&#10;//        val PURPLE = Color(200, 122, 255, 255)&#10;//        val VIOLET = Color(135, 60, 190, 255)&#10;//        val DARKPURPLE = Color(112, 31, 126, 255)&#10;//        val BEIGE = Color(211, 176, 131, 255)&#10;//        val BROWN = Color(127, 106, 79, 255)&#10;//        val DARKBROWN = Color(76, 63, 47, 255)&#10;//        val WHITE = Color(255, 255, 255, 255)&#10;//        val BLACK = Color(0, 0, 0, 255)&#10;//        val BLANK = Color(0, 0, 0, 0)&#10;//        val MAGENTA = Color(255, 0, 255, 255)&#10;//        val RAYWHITE = Color(245, 245, 245, 255)&#10;//    }&#10;//}" />
              <option name="updatedContent" value="import raylib.Color&#10;&#10;val LIGHTGRAY = Color(200, 200, 200, 255)&#10;val GRAY = Color(130, 130, 130, 255)&#10;val DARKGRAY = Color(80, 80, 80, 255)&#10;val YELLOW = Color(253, 249, 0, 255)&#10;val GOLD = Color(255, 203, 0, 255)&#10;val ORANGE = Color(255, 161, 0, 255)&#10;val PINK = Color(255, 109, 194, 255)&#10;val RED = Color(230, 41, 55, 255)&#10;val MAROON = Color(190, 33, 55, 255)&#10;val GREEN = Color(0, 228, 48, 255)&#10;val LIME = Color(0, 158, 47, 255)&#10;val DARKGREEN = Color(0, 117, 44, 255)&#10;val SKYBLUE = Color(102, 191, 255, 255)&#10;val BLUE = Color(0, 121, 241, 255)&#10;val DARKBLUE = Color(0, 82, 172, 255)&#10;val PURPLE = Color(200, 122, 255, 255)&#10;val VIOLET = Color(135, 60, 190, 255)&#10;val DARKPURPLE = Color(112, 31, 126, 255)&#10;val BEIGE = Color(211, 176, 131, 255)&#10;val BROWN = Color(127, 106, 79, 255)&#10;val DARKBROWN = Color(76, 63, 47, 255)&#10;val WHITE = Color(255, 255, 255, 255)&#10;val BLACK = Color(0, 0, 0, 255)&#10;val BLANK = Color(0, 0, 0, 0)&#10;val MAGENTA = Color(255, 0, 255, 255)&#10;val RAYWHITE = Color(245, 245, 245, 255)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/nativeMain/kotlin/Main.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/nativeMain/kotlin/Main.kt" />
              <option name="originalContent" value="import kotlinx.cinterop.ExperimentalForeignApi&#10;import kotlinx.cinterop.*&#10;import raylib.*&#10;&#10;@OptIn(ExperimentalForeignApi::class)&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;    val SCREEN_WIDTH = 1280&#10;    val SCREEN_HEIGHT = 720&#10;    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, &quot;Hola&quot;)&#10;    SetTargetFPS(60)&#10;&#10;&#10;    //val color = GetColor(990000)&#10;    while (!WindowShouldClose()) {&#10;        BeginDrawing()&#10;        ClearBackground(COLOR_RED)&#10;        EndDrawing()&#10;    }&#10;    CloseWindow()&#10;    //SetTargetFPS(60)&#10;    //InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT)&#10;    /*InitWindow(800, 600, &quot;Raylib Kotlin/Native Demo&quot;)&#10;    SetTargetFPS(60)&#10;&#10;    while (!WindowShouldClose()) {&#10;        BeginDrawing()&#10;        ClearBackground(RAYWHITE)&#10;        DrawText(&quot;Hola&quot;, 350, 280, 40, DARKGRAY)&#10;        EndDrawing()&#10;    }&#10;&#10;    CloseWindow()*/&#10;}&#10;" />
              <option name="updatedContent" value="import kotlinx.cinterop.ExperimentalForeignApi&#10;import kotlinx.cinterop.*&#10;import raylib.*&#10;&#10;@OptIn(ExperimentalForeignApi::class)&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;    val SCREEN_WIDTH = 1280&#10;    val SCREEN_HEIGHT = 720&#10;    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, &quot;Hola&quot;)&#10;    SetTargetFPS(60)&#10;&#10;&#10;    //val color = GetColor(990000)&#10;    while (!WindowShouldClose()) {&#10;        BeginDrawing()&#10;        ClearBackground(COLOR_RED.readValue())&#10;        EndDrawing()&#10;    }&#10;    CloseWindow()&#10;    //SetTargetFPS(60)&#10;    //InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT)&#10;    /*InitWindow(800, 600, &quot;Raylib Kotlin/Native Demo&quot;)&#10;    SetTargetFPS(60)&#10;&#10;    while (!WindowShouldClose()) {&#10;        BeginDrawing()&#10;        ClearBackground(RAYWHITE)&#10;        DrawText(&quot;Hola&quot;, 350, 280, 40, DARKGRAY)&#10;        EndDrawing()&#10;    }&#10;&#10;    CloseWindow()*/&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>